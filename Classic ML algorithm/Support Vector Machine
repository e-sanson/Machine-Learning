{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Support Vector Machine Classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preliminaries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-06T10:38:12.456826Z",
     "start_time": "2018-04-06T10:38:12.427749Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "import sys\n",
    "sys.path.append(\"../..\")\n",
    "import E4525_ML.samples as samples\n",
    "\n",
    "\n",
    "from sklearn import svm\n",
    "from sklearn import model_selection\n",
    "from E4525_ML import plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-06T10:38:17.514269Z",
     "start_time": "2018-04-06T10:38:17.510258Z"
    }
   },
   "outputs": [],
   "source": [
    "seed=4543\n",
    "np.random.seed(seed)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-02T20:40:09.742907Z",
     "start_time": "2018-04-02T20:40:09.739907Z"
    }
   },
   "source": [
    "### Sample Data Generation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-06T10:38:19.251888Z",
     "start_time": "2018-04-06T10:38:19.245871Z"
    }
   },
   "outputs": [],
   "source": [
    "N=40\n",
    "X,Y=samples.ellipsoid(N//2)\n",
    "X_test,Y_test=samples.ellipsoid(N//2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-06T10:38:20.328748Z",
     "start_time": "2018-04-06T10:38:20.066050Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1031610f0>"
      ]
     },
     "execution_count": 246,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(X[:,0],X[:,1],c=Y, s=40, cmap=plt.cm.Spectral)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Polinomial features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-02T20:43:13.079907Z",
     "start_time": "2018-04-02T20:43:13.070907Z"
    }
   },
   "source": [
    "\n",
    "\n",
    "$$\n",
    "        X_1, X_2, X_1^2, X_1 X_2, X_2^2\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:14:49.648330Z",
     "start_time": "2018-04-03T09:14:49.643316Z"
    }
   },
   "outputs": [],
   "source": [
    "def phi(X):\n",
    "    X1=X[:,0]\n",
    "    X2=X[:,1]\n",
    "    return np.vstack((X1,X2,X1**2,X1*X2,X2**2)).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:14:51.382939Z",
     "start_time": "2018-04-03T09:14:51.377928Z"
    }
   },
   "outputs": [],
   "source": [
    "Z=phi(X)\n",
    "Z_test=phi(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Linear SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:14:54.983509Z",
     "start_time": "2018-04-03T09:14:54.958445Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8"
      ]
     },
     "execution_count": 249,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model=svm.SVC(C=1000000000,kernel=\"linear\") \n",
    "np.average(model_selection.cross_val_score(model,Z,Y,cv=10))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:15:02.583707Z",
     "start_time": "2018-04-03T09:15:02.578693Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of support vectors is 8\n"
     ]
    }
   ],
   "source": [
    "model.fit(Z,Y)\n",
    "print(f'The number of support vectors is {len(model.support_vectors_)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:15:05.051266Z",
     "start_time": "2018-04-03T09:15:05.047255Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1000000000.0\n"
     ]
    }
   ],
   "source": [
    "print(max(model.dual_coef_[0]))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 10-fold cross validation - optimal value of C \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:15:11.521461Z",
     "start_time": "2018-04-03T09:15:11.518453Z"
    }
   },
   "outputs": [],
   "source": [
    "Cs=[0.001,0.01,0.1,1,10,100,1000,10000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:15:11.874399Z",
     "start_time": "2018-04-03T09:15:11.871391Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 4.71747825  4.93114745 22.25460101 23.26258084 24.3162152 ]\n",
      " [-0.85688319  5.03507915  0.7342488  -4.31447467 25.35202202]\n",
      " [-0.76763744  4.96832361  0.58926724 -3.81387121 24.68423951]\n",
      " [-5.3422035  -2.15364523 28.53913824 11.5052111   4.63818779]\n",
      " [ 2.1758714  -4.18493477  4.73441636 -9.10587988 17.51367899]\n",
      " [ 4.46813644 -1.04616339 19.96424323 -4.67440075  1.09445783]\n",
      " [ 3.4780773   5.11548949 12.09702169 17.79206787 26.16823275]\n",
      " [-0.65807057  5.09593951  0.43305688 -3.35348784 25.96859946]\n",
      " [-4.84612403 -2.10143256 23.48491814 10.18380284  4.41601881]]\n",
      "0.1\n"
     ]
    }
   ],
   "source": [
    "model=svm.SVC(kernel=\"linear\") \n",
    "\n",
    "parameters = {'C':Cs}\n",
    "clf=model_selection.GridSearchCV(model,parameters,cv=10)\n",
    "clf.fit(Z,Y)\n",
    "best_model=clf.best_estimator_\n",
    "\n",
    "best_model.fit(Z,Y)\n",
    "support_vectors=best_model.support_vectors_\n",
    "print(support_vectors)\n",
    "\n",
    "dual_coef=best_model.dual_coef_[0]\n",
    "\n",
    "print(max(abs(dual_coef)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:15:19.218917Z",
     "start_time": "2018-04-03T09:15:19.193852Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.95"
      ]
     },
     "execution_count": 254,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.average(model_selection.cross_val_score(best_model,Z, Y,cv=10))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:15:28.030337Z",
     "start_time": "2018-04-03T09:15:28.024321Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The class Y for each support vector is [0 0 0 0 0 1 1 1 1]\n"
     ]
    }
   ],
   "source": [
    "best_model.fit(Z,Y)\n",
    "support_vectors_classes=Y[best_model.support_]\n",
    "print(f'The class Y for each support vector is {support_vectors_classes}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T10:09:41.669967Z",
     "start_time": "2018-04-03T10:09:41.663950Z"
    }
   },
   "source": [
    "\n",
    "$$\n",
    "    \\sum_i \\alpha_i y_i =0\n",
    "$$\n",
    "where $y_i=-1$ for the negative class and $y_i=+1$ for the positive class\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:15:32.466124Z",
     "start_time": "2018-04-03T09:15:32.455095Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-2.7755575615628914e-17"
      ]
     },
     "execution_count": 256,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "support_coef=best_model.dual_coef_[0].ravel()\n",
    "support_coef.sum()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:15:34.758215Z",
     "start_time": "2018-04-03T09:15:34.752200Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 6, 7, 8]\n",
      "[[-0.76763744  4.96832361  0.58926724 -3.81387121 24.68423951]\n",
      " [ 3.4780773   5.11548949 12.09702169 17.79206787 26.16823275]\n",
      " [-0.65807057  5.09593951  0.43305688 -3.35348784 25.96859946]\n",
      " [-4.84612403 -2.10143256 23.48491814 10.18380284  4.41601881]]\n"
     ]
    }
   ],
   "source": [
    "C=0.1\n",
    "index=[]\n",
    "\n",
    "for i in range (0,len(support_coef)):\n",
    "    if abs(support_coef[i])==C:\n",
    "        index.append(i)\n",
    "print(index)\n",
    "\n",
    "print(support_vectors[index])\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T10:18:52.672521Z",
     "start_time": "2018-04-03T10:18:52.666505Z"
    }
   },
   "source": [
    "## Vector of loadings $w$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:15:39.007508Z",
     "start_time": "2018-04-03T09:15:39.001493Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.14682956  0.06861315 -0.37866999  0.25213885 -0.37136477]\n",
      "[ 0.14682956  0.06861315 -0.37866999  0.25213885 -0.37136477]\n"
     ]
    }
   ],
   "source": [
    "#check with the built-in function \n",
    "w=best_model.coef_[0]\n",
    "print(w)\n",
    "\n",
    "W=support_coef[:,np.newaxis]*support_vectors\n",
    "W=W.sum(axis=0)\n",
    "\n",
    "print(W)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T10:20:51.574518Z",
     "start_time": "2018-04-03T10:20:51.568503Z"
    }
   },
   "source": [
    "## We compute $b$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:15:43.510475Z",
     "start_time": "2018-04-03T09:15:43.505462Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9.56072019709151\n",
      "True\n",
      "9.560927983540612\n"
     ]
    }
   ],
   "source": [
    "# check with the built-in function \n",
    "\n",
    "b=best_model.intercept_[0]\n",
    "print(b)\n",
    "if 0 not in index:\n",
    "    print('True')\n",
    "    \n",
    "Y0=support_coef[0]/abs(support_coef[0])\n",
    "\n",
    "\n",
    "b= - np.dot(w.T,support_vectors[0]) +1/Y0\n",
    "\n",
    "print(b)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(5,)\n",
      "(40, 5)\n"
     ]
    }
   ],
   "source": [
    "print(w.shape)\n",
    "print(Z.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:15:57.863622Z",
     "start_time": "2018-04-03T09:15:57.859611Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.975\n",
      "0.975\n",
      "The accuracy of your function is the same as the accuracy of the predict method of the best estimator\n"
     ]
    }
   ],
   "source": [
    "def prediction (Z,w,b):\n",
    "    Y=np.zeros(len(Z))\n",
    "    for i in range (0,len(Z)):\n",
    "        Y[i]=np.dot(w.T,Z[i,:])+b\n",
    "    Y=(np.sign(Y)+1)/2\n",
    "    return Y\n",
    "\n",
    "Y_pred_1=prediction (Z,w,b)\n",
    "print(np.average(Y_pred_1==Y))\n",
    " \n",
    "Y_pred=best_model.predict(Z)\n",
    "print(np.average(Y_pred==Y))\n",
    "\n",
    "if np.average(Y_pred_1==Y)==np.average(Y_pred==Y):\n",
    "    print('The accuracy of your function is the same as the accuracy of the predict method of the best estimator')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Polinomial Kernel"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Polinomial kernel:\n",
    "$$\n",
    "    K(x,x') = (1 + x^T x')^2\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T10:41:21.745872Z",
     "start_time": "2018-04-03T10:41:21.742864Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9"
      ]
     },
     "execution_count": 262,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "poly_model=svm.SVC(C=1000000000,kernel=\"poly\",degree=2,gamma=1,coef0=1)\n",
    "np.average(model_selection.cross_val_score(poly_model,X,Y,cv=10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T10:34:28.640987Z",
     "start_time": "2018-04-03T10:34:28.630960Z"
    }
   },
   "source": [
    "10-fold cross validation - optimal values of $C$ and $\\gamma$ to use while fitting a  SVC polynomial kernel with the untransformed training data `X`. Keep the constant $c$ (`coef0`) fixed at 1.\n",
    "\n",
    "Display clearly the optimal values of $C$ and $\\gamma$, and the number of support vectors of the best model\n",
    "\n",
    "[HINT] \n",
    "\n",
    "1. Read the  [`model_selection.GridSearchCV` ](http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html#sklearn.model_selection.GridSearchCV)        documentation carefully\n",
    "2. Parameters to search over are passed in the `parameters`'s  **dictionary**   argument of `GridSearchCV`\n",
    "3. The number of folds is controled by the argument  `cv`\n",
    "4. Consider only the values of $C$ and $\\gamma$ provided below\n",
    "5. The GridSearchCV object, after fitting, contains a variable **`best_estimator_`** with the best calibrated model. You can get \n",
    "   from the values of best estimator's $C$  and $\\gamma$ parameters and the array of support vectors.\n",
    "6. As the search may be a bit time consuming, it may be useful so set the `GridSearchCV` verbose parameter so that you can see if the search is making progress."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T10:41:24.351797Z",
     "start_time": "2018-04-03T10:41:24.347788Z"
    }
   },
   "outputs": [],
   "source": [
    "Cs=[0.001,0.01,0.1,1,10,100]\n",
    "gammas=[0.01,0.1,1,10,100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T10:41:25.340425Z",
     "start_time": "2018-04-03T10:41:25.337417Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32 [[ 4.5580055  -2.20267639]\n",
      " [ 6.16510186  2.23039578]\n",
      " [ 4.71747825  4.93114745]\n",
      " [ 5.10518255  4.54402952]\n",
      " [ 3.62216133  5.8396358 ]\n",
      " [-0.66254926  5.85047639]\n",
      " [-0.85688319  5.03507915]\n",
      " [-0.76763744  4.96832361]\n",
      " [-4.37374094  2.05802205]\n",
      " [-5.81048568 -1.13915865]\n",
      " [-5.3422035  -2.15364523]\n",
      " [-3.67927333 -5.03515141]\n",
      " [-5.6712814  -4.43350214]\n",
      " [ 0.68678119 -6.16216673]\n",
      " [ 4.09448442 -3.11332949]\n",
      " [ 2.1758714  -4.18493477]\n",
      " [ 4.46813644 -1.04616339]\n",
      " [ 3.82734945  2.11959121]\n",
      " [ 4.36494726  2.24028098]\n",
      " [ 4.97610384  3.37897384]\n",
      " [ 3.4780773   5.11548949]\n",
      " [-0.36009911  3.61832315]\n",
      " [-0.65807057  5.09593951]\n",
      " [-3.12192323  1.63754771]\n",
      " [-3.72790519 -1.31951232]\n",
      " [-3.81196873 -1.47706162]\n",
      " [-3.48451533 -3.95952945]\n",
      " [-4.84612403 -2.10143256]\n",
      " [-2.94162577 -4.32396285]\n",
      " [-0.12372473 -4.4791839 ]\n",
      " [-0.79576065 -4.4059671 ]\n",
      " [ 3.47275917 -1.2114773 ]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "SVC(C=10, cache_size=200, class_weight=None, coef0=1,\n",
       "    decision_function_shape='ovr', degree=2, gamma=0.01, kernel='poly',\n",
       "    max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
       "    tol=0.001, verbose=False)"
      ]
     },
     "execution_count": 264,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model=svm.SVC(kernel=\"poly\",degree=2,coef0=1)\n",
    "parameters = {'C':Cs,'gamma':gammas}\n",
    "clf=model_selection.GridSearchCV(model,parameters,cv=10)\n",
    "clf.fit(Z,Y)\n",
    "best_poly_model=clf.best_estimator_\n",
    "\n",
    "best_poly_model.fit(X,Y)\n",
    "support_vectors=best_poly_model.support_vectors_\n",
    "print(len(support_vectors),support_vectors)\n",
    "\n",
    "best_poly_model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:19:12.901242Z",
     "start_time": "2018-04-03T09:19:12.862139Z"
    }
   },
   "source": [
    "<div class=\"alert alert-block alert-info\"> Problem 3.3 </div>\n",
    "Show the class Y for each support vector\n",
    "\n",
    "[HINT] after fitting the estimator  contains an boolean array `support_` that is set true for the index of data points that are support vectors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:19:12.928316Z",
     "start_time": "2018-04-03T09:19:12.907258Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1], dtype=uint8)"
      ]
     },
     "execution_count": 265,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "support_vectors_index=best_poly_model.support_\n",
    "Y[support_vectors_index]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-06T10:46:04.857000Z",
     "start_time": "2018-04-06T10:46:04.850985Z"
    }
   },
   "source": [
    "<div class=\"alert alert-block alert-info\"> Problem 3.4 </div>\n",
    "Show that\n",
    "$$\n",
    "    \\sum_i \\alpha_i y_i =0\n",
    "$$\n",
    "where $y_i=-1$ for the negative class and $y_i=+1$ for the positive class\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:19:12.979450Z",
     "start_time": "2018-04-03T09:19:12.951375Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32\n"
     ]
    }
   ],
   "source": [
    "support_coef=best_poly_model.dual_coef_[0].ravel()\n",
    "support_coef.sum()\n",
    "print(len(support_coef))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-06T10:46:50.498374Z",
     "start_time": "2018-04-06T10:46:50.491356Z"
    }
   },
   "source": [
    "<div class=\"alert alert-block alert-info\"> Problem 3.5 </div>\n",
    "Show which support vectors are in violation of the margin\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:19:13.047634Z",
     "start_time": "2018-04-03T09:19:13.016550Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30]\n",
      "[[ 4.5580055  -2.20267639]\n",
      " [ 6.16510186  2.23039578]\n",
      " [ 4.71747825  4.93114745]\n",
      " [ 5.10518255  4.54402952]\n",
      " [-0.85688319  5.03507915]\n",
      " [-0.76763744  4.96832361]\n",
      " [-4.37374094  2.05802205]\n",
      " [-5.81048568 -1.13915865]\n",
      " [-5.3422035  -2.15364523]\n",
      " [-3.67927333 -5.03515141]\n",
      " [ 0.68678119 -6.16216673]\n",
      " [ 4.09448442 -3.11332949]\n",
      " [ 2.1758714  -4.18493477]\n",
      " [ 4.46813644 -1.04616339]\n",
      " [ 3.82734945  2.11959121]\n",
      " [ 4.36494726  2.24028098]\n",
      " [ 4.97610384  3.37897384]\n",
      " [ 3.4780773   5.11548949]\n",
      " [-0.36009911  3.61832315]\n",
      " [-0.65807057  5.09593951]\n",
      " [-3.12192323  1.63754771]\n",
      " [-3.81196873 -1.47706162]\n",
      " [-3.48451533 -3.95952945]\n",
      " [-4.84612403 -2.10143256]\n",
      " [-2.94162577 -4.32396285]\n",
      " [-0.12372473 -4.4791839 ]\n",
      " [-0.79576065 -4.4059671 ]]\n"
     ]
    }
   ],
   "source": [
    "index=[]\n",
    "\n",
    "for i in range (0,len(support_coef)):\n",
    "    if abs(support_coef[i])==10:\n",
    "        index.append(i)\n",
    "print(index)\n",
    "support_vectors_violation=support_vectors[index]\n",
    "print(support_vectors_violation)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:19:13.070693Z",
     "start_time": "2018-04-03T09:19:13.051643Z"
    }
   },
   "source": [
    "<div class=\"alert alert-block alert-info\"> Problem 3.6 </div>\n",
    "Write a function that, give two matrices $X_{i,d}$, $X'_{j,d}$ for $i=1,\\dots,N_1$, $j=1,\\dots,N_2$ and $d=1,\\dots D$\n",
    "computes the kernel products\n",
    "$$\n",
    "    K_{i,j} = \\textrm{kernel}(X_i,X'_j)\n",
    "$$\n",
    "where 'kernel' is the optimal kernel you found by cross-validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:19:13.090746Z",
     "start_time": "2018-04-03T09:19:13.076708Z"
    }
   },
   "outputs": [],
   "source": [
    "gamma=0.01\n",
    "def Kernel(X1,X2,gamma):\n",
    "    return (1 + gamma*np.dot(X1.T,X2))**2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:19:13.401572Z",
     "start_time": "2018-04-03T09:19:13.092751Z"
    }
   },
   "source": [
    "<div class=\"alert alert-block alert-info\"> Problem 3.7 </div>\n",
    "Write a prediction function that classifies points as having class $y=0$ or $y=1$ in terms of $\\alpha$, $b$, and the support vectors, using equation\n",
    "\n",
    "$$\n",
    "  y(x) =  \\frac{\\textrm{sign}( \\sum_i \\alpha_i y_i K(x,x_i) + b ) + 1}{2}\n",
    "$$\n",
    "\n",
    "Use this class to classify all points in the training set and verify that the accuracy of your function is exactly the same as  the\n",
    "accuracy of the `predict` method of the best estimator."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T09:19:13.409593Z",
     "start_time": "2018-04-03T09:19:13.403577Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9\n",
      "0.9\n",
      "The accuracy of your function is the same as the accuracy of the predict method of the best estimator\n"
     ]
    }
   ],
   "source": [
    "b=best_poly_model.intercept_[0]\n",
    "\n",
    "gamma=0.01\n",
    "def prediction (X,gamma):\n",
    "    Y=np.zeros(len(X))\n",
    "    for i in range (0,len(X)):\n",
    "        for j in range (0,len(support_vectors)):\n",
    "            Y[i]+=support_coef[j]*Kernel(X[i],support_vectors[j],gamma)\n",
    "        Y[i]=(np.sign(Y[i]+b)+1)/2\n",
    "    return Y\n",
    "\n",
    "Y_pred_1=prediction (X,gamma)\n",
    "print(np.average(Y_pred_1==Y))\n",
    "\n",
    "Y_pred=best_poly_model.predict(X)\n",
    "print(np.average(Y_pred==Y))\n",
    "\n",
    "if np.average(Y_pred_1==Y)==np.average(Y_pred==Y):\n",
    "    print('The accuracy of your function is the same as the accuracy of the predict method of the best estimator')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T11:30:39.093828Z",
     "start_time": "2018-04-03T11:30:39.090820Z"
    }
   },
   "source": [
    "<div class=\"alert alert-block alert-info\"> Problem 3.8 </div>\n",
    "Use the function `decision_boundary_2d` from the python module `E4525_ML.plots` to display a graph of the training points and \n",
    "the optimal estimator descision boundary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-04-03T11:30:39.932057Z",
     "start_time": "2018-04-03T11:30:39.909998Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "f,ax= plt.subplots(1,1, sharey=True,figsize=(10,5))\n",
    "plots.decision_boundary_2d(best_poly_model,X,Y,ax,alpha=0.8,slack=0.25)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": "block",
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
